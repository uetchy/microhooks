{"version":3,"file":"microhooks.esm.js","sources":["../src/index.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useState, useEffect, useRef } from 'react';\nimport load from 'load-asset';\n\nexport function useDeferredState<T>(\n  duration: number,\n  initialValue: T\n): [T, React.Dispatch<React.SetStateAction<T>>] {\n  const [response, setResponse] = useState<T>(initialValue);\n  const [innerValue, setInnerValue] = useState<T>(initialValue);\n\n  useEffect(() => {\n    const fn = setTimeout(() => {\n      setResponse(innerValue);\n    }, duration);\n\n    return () => {\n      clearTimeout(fn);\n    };\n  }, [duration, innerValue]);\n\n  return [response, setInnerValue];\n}\n\nexport function useTakeEffect(\n  fn: () => void | (() => void),\n  deps: React.DependencyList\n) {\n  useEffect(() => {\n    if (deps.some(d => !d)) return;\n    const destructor = fn();\n    return () => {\n      destructor && destructor();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n}\n\ninterface Asset {\n  [key: string]: string;\n}\n\nexport function usePrefetch(assets: Asset[]): void {\n  useEffect((): void => {\n    load.all(assets);\n  }, []);\n}\n\nexport interface Bounds {\n  width: number;\n  height: number;\n}\n\n/**\n * const {width, height} = useBounds();\n *\n * @export\n * @returns {Bounds}\n */\nexport function useWindowBounds(): Bounds {\n  const [bounds, setBounds] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight,\n  });\n\n  useEffect(() => {\n    const handleResize = () =>\n      setBounds({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return bounds;\n}\n\nexport function useInlineSVG(\n  svgString: string,\n  styles = {}\n): () => React.ReactNode {\n  const svgContainerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (svgContainerRef.current) {\n      svgContainerRef.current.innerHTML = svgString;\n    }\n  }, []);\n\n  const render = () => <div style={styles} ref={svgContainerRef} />;\n  return render;\n}\n"],"names":["useDeferredState","duration","initialValue","useState","response","setResponse","innerValue","setInnerValue","useEffect","fn","setTimeout","clearTimeout","useTakeEffect","deps","some","d","destructor","usePrefetch","assets","load","all","useWindowBounds","width","window","innerWidth","height","innerHeight","bounds","setBounds","handleResize","addEventListener","removeEventListener","useInlineSVG","svgString","styles","svgContainerRef","useRef","current","innerHTML","render","React","style","ref"],"mappings":";;;SAIgBA,iBACdC,UACAC;kBAEgCC,QAAQ,CAAID,YAAJ;MAAjCE;MAAUC;;mBACmBF,QAAQ,CAAID,YAAJ;MAArCI;MAAYC;;EAEnBC,SAAS,CAAC;QACFC,EAAE,GAAGC,UAAU,CAAC;MACpBL,WAAW,CAACC,UAAD,CAAX;KADmB,EAElBL,QAFkB,CAArB;WAIO;MACLU,YAAY,CAACF,EAAD,CAAZ;KADF;GALO,EAQN,CAACR,QAAD,EAAWK,UAAX,CARM,CAAT;SAUO,CAACF,QAAD,EAAWG,aAAX,CAAP;;AAGF,SAAgBK,cACdH,IACAI;EAEAL,SAAS,CAAC;QACJK,IAAI,CAACC,IAAL,CAAU,UAAAC,CAAC;aAAI,CAACA,CAAL;KAAX,CAAJ,EAAwB;QAClBC,UAAU,GAAGP,EAAE,EAArB;WACO;MACLO,UAAU,IAAIA,UAAU,EAAxB;KADF;GAHO,EAONH,IAPM,CAAT;;AAcF,SAAgBI,YAAYC;EAC1BV,SAAS,CAAC;IACRW,IAAI,CAACC,GAAL,CAASF,MAAT;GADO,EAEN,EAFM,CAAT;;;;;;;;;AAgBF,SAAgBG;mBACclB,QAAQ,CAAC;IACnCmB,KAAK,EAAEC,MAAM,CAACC,UADqB;IAEnCC,MAAM,EAAEF,MAAM,CAACG;GAFmB;MAA7BC;MAAQC;;EAKfpB,SAAS,CAAC;QACFqB,YAAY,GAAG,SAAfA,YAAe;aACnBD,SAAS,CAAC;QACRN,KAAK,EAAEC,MAAM,CAACC,UADN;QAERC,MAAM,EAAEF,MAAM,CAACG;OAFR,CADU;KAArB;;IAKAH,MAAM,CAACO,gBAAP,CAAwB,QAAxB,EAAkCD,YAAlC;WACO;MACLN,MAAM,CAACQ,mBAAP,CAA2B,QAA3B,EAAqCF,YAArC;KADF;GAPO,EAUN,EAVM,CAAT;SAYOF,MAAP;;AAGF,SAAgBK,aACdC,WACAC;MAAAA;IAAAA,SAAS;;;MAEHC,eAAe,GAAGC,MAAM,CAAiB,IAAjB,CAA9B;EAEA5B,SAAS,CAAC;QACJ2B,eAAe,CAACE,OAApB,EAA6B;MAC3BF,eAAe,CAACE,OAAhB,CAAwBC,SAAxB,GAAoCL,SAApC;;GAFK,EAIN,EAJM,CAAT;;MAMMM,MAAM,GAAG,SAATA,MAAS;WAAMC,aAAA,MAAA;MAAKC,KAAK,EAAEP;MAAQQ,GAAG,EAAEP;KAAzB,CAAN;GAAf;;SACOI,MAAP;;;;;"}